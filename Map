  Map对象保存键值对
  任何值 都可以作为一个键或值
  
  new Map([params])
  
  params可以是一个数组或者其他 iterable 对象，
  其元素为键值对(两个元素的数组，例如: [[ 1, 'one' ],[ 2, 'two' ]])。
  每个键值对都会添加到新的 Map。null 会被当做 undefined。



一个Map对象在迭代时会根据对象中元素的插入顺序来进行 —
一个  for...of 循环在每次迭代后会返回一个形式为[key，value]的数组。


=======================================================================
Objects 和 maps 的比较

a.一个Object的键只能是字符串或者 Symbols，但一个 Map 的键可以是任意值，包括函数、对象、基本类
型。
b.Map 中的键值是有序的，而添加到对象中的键则不是。
因此，当对它进行遍历时，Map 对象是按插入的顺序返回键值。
c.你可以通过 size 属性直接获取一个 Map 的键值对个数，而 Object 的键值对个数只能手动计算。
d.Map 可直接进行迭代，而 Object 的迭代需要先获取它的键数组，然后再进行迭代。
e.Object都有自己的原型，原型链上的键名有可能和你自己在对象上的设置的键名产生冲突。虽然 ES5 开始可以用 
map = Object.create(null) 来创建一个没有原型的对象，但是这种用法不太常见
f.Map 在涉及频繁增删键值对的场景下会有些性能优势。

